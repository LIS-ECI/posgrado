[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

#Cambiar estructura de p√°ginas
authc.loginUrl = /Inicio.xhtml
authc.successUrl = /Menu.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml

ssl.enabled = false


#jdbcrealm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm 
jdbcRealm.permissionsLookupEnabled = true 
jdbcRealm.authenticationQuery = select pwd from usr where usuario = ? 
jdbcRealm.userRolesQuery = select rol from usr where usuario = ? 

#If you have a per-role permissions table, add the query here.
#Given that in this example there are no per-role-permissions, the
#role name is privided
jdbcRealm.permissionsQuery = select rol from usr where usuario = ? 

#hashing and salting
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true

# privateSalt needs to be base64-encoded in shiro.ini but not in the Java code
# To generate the base64-encoded salt, use :https://www.base64encode.org/

hashService.privateSalt = bXlwcml2YXRlc2FsdA==
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService
passwordMatcher.passwordService = $passwordService

jdbcRealm.credentialsMatcher = $passwordMatcher

#jdbcrealm datasource
ds = com.jolbox.bonecp.BoneCPDataSource 
ds.driverClass=org.postgresql.Driver
ds.jdbcUrl=jdbc:postgresql://ec2-23-21-246-11.compute-1.amazonaws.com:5432/dasd80qatocrac?ssl=true&amp;sslfactory=org.postgresql.ssl.NonValidatingFactory
ds.username = tozmvdhrkkvroa
ds.password = ae7d0de6a793a4907667e66ad6535a43c84a5449c17df2a49b9ececf40736879 
jdbcRealm.dataSource=$ds 

securityManager.realms = $jdbcRealm


# Filter Setup
[urls]

/javax.faces.resource/** = anon 

/login.xhtml = authc

/logout = logout

/restricted/** = authc, roles[admin]
/employees/** = authc, roles[employee]
/open/** = anon

/** = anon
